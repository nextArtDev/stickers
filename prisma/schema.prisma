// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  phone    String @unique
  name     String
  password String

  role       Role    @default(USER)
  isVerified Boolean @default(false)

  verificationCode Int?
  verificationDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String? @unique
  adress   String?
  bio      String?
  website  String?
  gender   String?

  images        Image[]
  Uploader      Uploader[]
  Order         Order[]
  Configuration Configuration[]
}

enum Role {
  USER
  ADMIN
}

model Image {
  id  String @id @default(cuid())
  url String @db.Text
  key String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User                    User?           @relation(fields: [userId], references: [id])
  userId                  String?
  Uploader                Uploader?       @relation(fields: [uploaderId], references: [id])
  uploaderId              String?
  configurationUrl        Configuration[] @relation(name: "ImageToUrl")
  configurationCroppedUrl Configuration[] @relation(name: "ImageToCroppedUrl")
}

model Uploader {
  id     String  @id @default(cuid())
  images Image[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

enum PhoneModel {
  iphonex
  iphone11
  iphone12
  iphone13
  iphone14
  iphone15
}

enum CaseMaterial {
  silicone
  polycarbonate
}

enum CaseFinish {
  smooth
  textured
}

enum CaseColor {
  black
  blue
  rose
}

model Configuration {
  id              String        @id @default(cuid())
  width           Int
  height          Int
  imageUrl        Image         @relation(name: "ImageToUrl", fields: [imageId], references: [id])
  color           CaseColor?
  model           PhoneModel?
  material        CaseMaterial?
  finish          CaseFinish?
  croppedImageUrl Image?        @relation(name: "ImageToCroppedUrl", fields: [croppedImageId], references: [id])
  Order           Order[]
  imageId         String
  croppedImageId  String?
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?
}

model Order {
  id              String        @id @default(cuid())
  configurationId String
  configuration   Configuration @relation(fields: [configurationId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  isPaid          Boolean       @default(false)
  status          OrderStatus   @default(awaiting_shipment)

  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  billingAddressId  String?

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}

model ShippingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}

model BillingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}
